- Polimorfismo: añadir diferentes tipos de ataques. Un ataque normal, ataques especiales basados en %
- Añadir atacar y defender. No sólo atacar. Defender restará daño recibido
- Almacenar victorias/derrotas en int individuales pero tambien en un array de numeros. De forma que al comprobar
una racha de victorias/derrotas, sea posible otorgar algun tipo de recompensa/penalizacion especial
- En el menu no se puede controlar qué usuario es el que está realmente. Entonces, cuando se seleccione una opción que
es especifica para cada usuario, se deberá de pedir el nombre del usuario o del luchador, dependiendo de lo que se requiera.
Por si el usuario no se acuerda de alguno de los dos Strings, pues ha de ser exactamente igual al del JSON para no generar errores,
se deberá de imprimir de alguna forma la informacion de ese usuario
- Log se duplica al añadir
- Fighter turns mal
- Se duplican ventanas de KeyListener
- Cronometro va loco
- Los puntos de stats no se suman correctamente si el usuario decide no subir nivel entre peleas
- Los puntos de stats se suman muy mal :D problema en el algoritmo? probablemente no se aaaaaaaa
- Los puntos de stats no se actualizan en el GSON por alguna razon. De hecho da NullPointerException.
Pero es pillado con un catch
- PvP? not found


**** Manejar Doble Jugadores ****

- El Main Menu hacer que si es para dos jugadores se cambie la bienvenida y sea de los nombres de
ambos jugadores y sus luchadores

- Luego para cada opcion del log se haria una pregunta sobre quién es el que quier hacer qué y dependiendo
de la respuesta con un switch, se modificarían las cosas para una instancia de fighter u otra

Esto haría falta para:
    - Level Up
    - Show Stats
    - Show Log

**** Manejar Doble Jugadores ****

- Considerar ir mejorando la CPU a medida que va ganando/perdiendo incluso aunque sea un PvE
- Arreglar el puto print de Opponent joder
- GSONCreator LoadFile carga desde el final, no desde el principio. Y si luego se pilla un rango
que ya se ha mejorado, viene con las stats chetas



WORKING:

public String declareWinner(Fighter fighter1, Fighter fighter2, String firstAttacker) { // firstAttacker calls Randomizer

        // Like this we will manage who goes first. They are copies of the Objects, but they will modify the OG Object
        Fighter currentAttacker = firstAttacker.equals(fighter1.getUserName1()) ? fighter1 : fighter2;
        Fighter currentDefender = currentAttacker == fighter1 ? fighter2 : fighter1;

        // So we can restore the vitality of the original Object
        int currentAttackerOGHP = currentAttacker.getVitality();
        int currentDefenderOGHP = currentDefender.getVitality();

        String winner;

        // Now we need to implement the MiniGame and the Damage to HP
        // If the MiniGame is done properly, then the current attacker/defender can attack/defend
        // Call the attack/dodge methods accordingly

        while (currentAttacker.getVitality() > 0 && currentDefender.getVitality() > 0) {
            /*int timer = randomizer.timerGenerator(currentAttacker.fighterRank, currentAttacker.getDexterity());
            String generatedArrows = randomizer.arrowGenerator(currentAttacker.fighterRank);
            KeyListenerMinigame minigame = new KeyListenerMinigame((generatedArrows.length() / 2 + 1), generatedArrows, timer);*/

            int damageDealt = currentAttacker.attack(currentAttacker.getStrength());
            currentDefender.setVitality(currentDefender.getVitality() - damageDealt); // attack method

            System.out.println("Damage dealt: " + damageDealt);
            System.out.println("Damage dealt by attacker: " + currentAttacker.attack(currentAttacker.getStrength()));
            System.out.println("Damage dealt by defender: " + currentDefender.attack(currentDefender.getStrength()));
            System.out.println("Current attacker HP: " + currentAttacker.getVitality());
            System.out.println("Current defender HP: " + currentDefender.getVitality());

            /*if (minigame.getResult()) {
                if (!(currentDefender.dodge(currentDefender.getDexterity()))) { // dodge method; false means it didn't manage to dodge so takes the dmg
                    currentDefender.setVitality(currentAttacker.attack(currentAttacker.getStrength())); // attack method
                } else {
                    System.out.println("Your turn is over ...\n");
                }
            } else {
                System.out.println("Since you have failed to do the MiniGame, you will be the one taking damage");
                currentAttacker.setVitality(currentDefender.attack(currentDefender.getStrength()));
            }*/
            // Here we swap attacker and defender roles
            // Not sure if it works

            Fighter tempFighter = currentAttacker;
            currentAttacker = currentDefender;
            currentDefender = tempFighter;
        }
        // Determine winner based on remaining HP before resetting HP
        if (fighter1.getVitality() <= 0) {
            winner = fighter2.getUserName1();
        } else {
            winner = fighter1.getUserName1();
        }

        fighter1.setVitality(currentAttackerOGHP);
        fighter2.setVitality(currentDefenderOGHP);
        return winner;
    }

NOT WORKING:


public String declareWinner(Fighter fighter1, Fighter fighter2, String firstAttacker) { // firstAttacker calls Randomizer

        // Like this we will manage who goes first. They are copies of the Objects, but they will modify the OG Object
        Fighter currentAttacker = firstAttacker.equals(fighter1.getUserName1()) ? fighter1 : fighter2;
        Fighter currentDefender = currentAttacker == fighter1 ? fighter2 : fighter1;

        // So we can restore the vitality of the original Object
        int currentAttackerOGHP = currentAttacker.getVitality();
        int currentDefenderOGHP = currentDefender.getVitality();

        String winner;

        // Now we need to implement the MiniGame and the Damage to HP
        // If the MiniGame is done properly, then the current attacker/defender can attack/defend
        // Call the attack/dodge methods accordingly

        while (currentAttacker.getVitality() > 0 && currentDefender.getVitality() > 0) {
            int timer = randomizer.timerGenerator(currentAttacker.fighterRank, currentAttacker.getDexterity());
            String generatedArrows = randomizer.arrowGenerator(currentAttacker.fighterRank);
            KeyListenerMinigame minigame = new KeyListenerMinigame((generatedArrows.length() / 2 + 1), generatedArrows, timer);

            if (minigame.getResult()) {
                if (!(currentDefender.dodge(currentDefender.getDexterity()))) { // dodge method; false means it didn't manage to dodge so takes the dmg
                    currentDefender.setVitality(currentAttacker.attack(currentAttacker.getStrength())); // attack method
                } else {
                    System.out.println("Your turn is over ...\n");
                }
            } else {
                System.out.println("Since you have failed to do the MiniGame, you will be the one taking damage");
                currentAttacker.setVitality(currentDefender.attack(currentDefender.getStrength()));
            }
            // Here we swap attacker and defender roles
            // Not sure if it works

            Fighter tempFighter = currentAttacker;
            currentAttacker = currentDefender;
            currentDefender = tempFighter;
        }
        // Determine winner based on remaining HP before resetting HP
        if (fighter1.getVitality() <= 0) {
            winner = fighter2.getUserName1();
        } else {
            winner = fighter1.getUserName1();
        }

        fighter1.setVitality(currentAttackerOGHP);
        fighter2.setVitality(currentDefenderOGHP);
        return winner;
    }